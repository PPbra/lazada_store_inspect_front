{"ast":null,"code":"'use strict';\n\nvar fails = require('../internals/fails');\n\nvar prototype = Date.prototype;\nvar getTime = prototype.getTime;\nvar nativeDateToISOString = prototype.toISOString;\n\nvar leadingZero = function leadingZero(number) {\n  return number > 9 ? number : '0' + number;\n}; // `Date.prototype.toISOString` method implementation\n// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring\n// PhantomJS / old WebKit fails here:\n\n\nmodule.exports = fails(function () {\n  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  nativeDateToISOString.call(new Date(NaN));\n}) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var date = this;\n  var year = date.getUTCFullYear();\n  var milliseconds = date.getUTCMilliseconds();\n  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';\n  return sign + ('00000' + Math.abs(year)).slice(sign ? -6 : -4) + '-' + leadingZero(date.getUTCMonth() + 1) + '-' + leadingZero(date.getUTCDate()) + 'T' + leadingZero(date.getUTCHours()) + ':' + leadingZero(date.getUTCMinutes()) + ':' + leadingZero(date.getUTCSeconds()) + '.' + (milliseconds > 99 ? milliseconds : '0' + leadingZero(milliseconds)) + 'Z';\n} : nativeDateToISOString;","map":{"version":3,"sources":["/Users/bazzil/Documents/bazzil-doc/lazada_store_inspect_front/node_modules/react-app-polyfill/node_modules/core-js/internals/date-to-iso-string.js"],"names":["fails","require","prototype","Date","getTime","nativeDateToISOString","toISOString","leadingZero","number","module","exports","call","NaN","isFinite","RangeError","date","year","getUTCFullYear","milliseconds","getUTCMilliseconds","sign","Math","abs","slice","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds"],"mappings":"AAAA;;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,oBAAD,CAAnB;;AACA,IAAIC,SAAS,GAAGC,IAAI,CAACD,SAArB;AACA,IAAIE,OAAO,GAAGF,SAAS,CAACE,OAAxB;AACA,IAAIC,qBAAqB,GAAGH,SAAS,CAACI,WAAtC;;AAEA,IAAIC,WAAW,GAAG,SAAdA,WAAc,CAAUC,MAAV,EAAkB;AAClC,SAAOA,MAAM,GAAG,CAAT,GAAaA,MAAb,GAAsB,MAAMA,MAAnC;AACD,CAFD,C,CAIA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAkBV,KAAK,CAAC,YAAY;AAClC,SAAOK,qBAAqB,CAACM,IAAtB,CAA2B,IAAIR,IAAJ,CAAS,CAAC,IAAD,GAAQ,CAAjB,CAA3B,KAAmD,0BAA1D;AACD,CAFsB,CAAL,IAEZ,CAACH,KAAK,CAAC,YAAY;AACvBK,EAAAA,qBAAqB,CAACM,IAAtB,CAA2B,IAAIR,IAAJ,CAASS,GAAT,CAA3B;AACD,CAFW,CAFK,GAIX,SAASN,WAAT,GAAuB;AAC3B,MAAI,CAACO,QAAQ,CAACT,OAAO,CAACO,IAAR,CAAa,IAAb,CAAD,CAAb,EAAmC,MAAMG,UAAU,CAAC,oBAAD,CAAhB;AACnC,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,IAAI,GAAGD,IAAI,CAACE,cAAL,EAAX;AACA,MAAIC,YAAY,GAAGH,IAAI,CAACI,kBAAL,EAAnB;AACA,MAAIC,IAAI,GAAGJ,IAAI,GAAG,CAAP,GAAW,GAAX,GAAiBA,IAAI,GAAG,IAAP,GAAc,GAAd,GAAoB,EAAhD;AACA,SAAOI,IAAI,GAAG,CAAC,UAAUC,IAAI,CAACC,GAAL,CAASN,IAAT,CAAX,EAA2BO,KAA3B,CAAiCH,IAAI,GAAG,CAAC,CAAJ,GAAQ,CAAC,CAA9C,CAAP,GACL,GADK,GACCb,WAAW,CAACQ,IAAI,CAACS,WAAL,KAAqB,CAAtB,CADZ,GAEL,GAFK,GAECjB,WAAW,CAACQ,IAAI,CAACU,UAAL,EAAD,CAFZ,GAGL,GAHK,GAGClB,WAAW,CAACQ,IAAI,CAACW,WAAL,EAAD,CAHZ,GAIL,GAJK,GAICnB,WAAW,CAACQ,IAAI,CAACY,aAAL,EAAD,CAJZ,GAKL,GALK,GAKCpB,WAAW,CAACQ,IAAI,CAACa,aAAL,EAAD,CALZ,GAML,GANK,IAMEV,YAAY,GAAG,EAAf,GAAoBA,YAApB,GAAmC,MAAMX,WAAW,CAACW,YAAD,CANtD,IAOL,GAPF;AAQD,CAlBgB,GAkBbb,qBAlBJ","sourcesContent":["'use strict';\nvar fails = require('../internals/fails');\nvar prototype = Date.prototype;\nvar getTime = prototype.getTime;\nvar nativeDateToISOString = prototype.toISOString;\n\nvar leadingZero = function (number) {\n  return number > 9 ? number : '0' + number;\n};\n\n// `Date.prototype.toISOString` method implementation\n// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring\n// PhantomJS / old WebKit fails here:\nmodule.exports = (fails(function () {\n  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  nativeDateToISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var date = this;\n  var year = date.getUTCFullYear();\n  var milliseconds = date.getUTCMilliseconds();\n  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';\n  return sign + ('00000' + Math.abs(year)).slice(sign ? -6 : -4) +\n    '-' + leadingZero(date.getUTCMonth() + 1) +\n    '-' + leadingZero(date.getUTCDate()) +\n    'T' + leadingZero(date.getUTCHours()) +\n    ':' + leadingZero(date.getUTCMinutes()) +\n    ':' + leadingZero(date.getUTCSeconds()) +\n    '.' + (milliseconds > 99 ? milliseconds : '0' + leadingZero(milliseconds)) +\n    'Z';\n} : nativeDateToISOString;\n"]},"metadata":{},"sourceType":"script"}